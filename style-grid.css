body {
	margin: 4em;
	#background-color: yellow;
  	background-color: #333;
  	font-family: "Abel";
  	color: #fff;
}

@media (min-width: 600px) {
	.grid-container {  display: grid;
  		grid-template-columns: 1fr 1fr;
  		grid-template-rows: 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr;
  		gap: 2em;
  		grid-auto-flow: column;
  		grid-template-areas:
    		"Box1 Box2"
    		"Box1 Box2"
    		"Box3 Box4"
			"Box3 Box4"
    		"Box5 Box6"
    		"Box5 Box6"
    		"Box7 Box8"
    		"Box7 Box8"
    		"Box9 Box10" 
			"Box9 Box10"
			"Box11 Box12"
			"Box11 Box12"
			"Box13 Box14" 
			"Box13 Box14" 
			"Box15 Box16"
			"Box15 Box16";
    	margin:3em;
  		opacity: 0.8;"
  		
	}
}


@media (min-width: 1200px) {
	.grid-container {  display: grid;
  		grid-template-columns: 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr;
  		grid-template-rows: 1fr 1fr 1fr 1fr;
  		gap: 2em;
  		grid-auto-flow: row;
  		grid-template-areas:
    		"Box1 Box1 Box2 Box3 Box3 Box4 Box4 Box5"
    		"Box6 Box6 Box7 Box8 Box9 Box10 Box10 Box11"
    		"Box6 Box6 Box7 Box12 Box13 Box10 Box10 Box11"
    		"Box14 Box14 Box14 Box15 Box15 Box16 Box16 Box16";
    	margin:3em;
  		opacity: 0.8;"
  		
	}
}


.Box1 { 
	grid-area: Box1; 
}

.Box2 { 
	grid-area: Box2;
	font-size: 1.5em;
	text-align: center;
	border: 0.1em solid white;
	 
}

.Box5 { 
	grid-area: Box5;
	font-size: 1.5em;
	text-align: center;
	border: 0.1em solid white;
 
}


.Box3 { grid-area: Box3; }

.Box4 { 
	grid-area: Box4;
	display: inline-block; 
}

.Box5 { grid-area: Box5; }

.Box6 { 
	grid-area: Box6;
}

.Box7 { grid-area: Box7; }
.Box8 { grid-area: Box8; }
.Box9 { grid-area: Box9; }
.Box10 { grid-area: Box10; }
.Box11 { grid-area: Box11; }
.Box12 { grid-area: Box12; }
.Box13 { grid-area: Box13; }
.Box14 { grid-area: Box14; }
.Box15 { grid-area: Box15; }
.Box16 { grid-area: Box16; }


#text {
	padding: 2em;
}


/*
In grid-template-areas You can’t create a non-rectangular area, 
so the property can’t be used to create an ‘L’ or ‘T’ shaped area
*/


/*
The media query order is important:

That's by design of CSS — Cascading Style Sheet.

It means that, if you apply two rules that collide to the same elements, 
it will choose the last one that was declared, unless the first one has the !important marker or is more specific

*/


.bg1 {
	background-image: url('./images/bg1.jpg');
}

.bg2 {
	background-image: url('./images/bg2.jpg');
}

.patt1 {
	background-image: url('./images/pattern2.jpg');
}

.grid-container > div {
  /*background-color: rgba(255, 255, 255, 0.8);*/
  background-size: cover;
  background-attachment: fixed;
  padding: 1em 0;
 
}

.flex-container {
	/*display: flex;*/
	display: inline-block;
	flex-direction: column;
	/*gap: 1em;*/
	/*this centers the text horizontally*/
  	/*justify-content: center;*/

  	/*this centers the text vertically*/
  	align-items: center;
  	text-align: center; 
}



.flex-container a {
	text-decoration: none;
	text-align: center;
	background-color: #000000AA;
	color: white;
	/*border: 0.1em solid white;*/
	border-radius: 0.5em;
	margin-bottom: 0.5em;
	/*margin-left: 1em;*/
  	/* required for next position absolute*/
  	position: relative;
  	/* inline-block per andare a capo*/
	display: inline-block;
	width: 14em;
}

.flex-container a:hover {
	background-color: #777777;
}


.flex-container a i {
	position: absolute;
	top: 50%;
	left: 0.5em;
	transform: translateY(-50%);
	/*font-size: 10px;*/
}




